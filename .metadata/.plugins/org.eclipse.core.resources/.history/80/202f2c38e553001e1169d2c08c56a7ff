package com.onlinesales;

import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.fail;

import java.util.LinkedHashMap;
import java.util.Map;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

public class ProbabilitySimulatorTest {

	 private ProbabilitySimulator simulator;

	    @BeforeEach
	    public void setUp() {
	        simulator = new ProbabilitySimulator();

	    }
	    
//	    @AfterEach
//	    public void destroy() {
//	    	simulator = null;
//	    	
//	    }

//	    @Test
//	    public void testAddEvent() {
//	        assertTrue(simulator.addEvent("Event1", 50.0));
//	        assertFalse(simulator.addEvent("Event1", 60.0));
//	    }
//
//	    @Test
//	    public void testInvalidProbability() {
//
//	    	try {
//	    		simulator.addEvent("Event1", 120.0);
//	    		fail("Expected IllegalArgumentException, but it was not thrown.");
//			} catch (IllegalArgumentException e) {
//				assertNotNull(e.getMessage());
//			}
//	    	
//	        
//	    }
//
//	    @Test
//	    public void testNegativeProbability() {
//
//	    	try {
//	    		simulator.addEvent("Event1", -10.0);
//	    		fail("Expected IllegalArgumentException, but it was not thrown.");
//				
//			} catch (IllegalArgumentException e) {
//				assertNotNull(e.getMessage());
//			}
//	    	
//	    }

//	    @Test
//	    public void testTotalProbabilityExceeds100() {
//	        try {
//	            simulator.addEvent("Event1", 60.0);
//	            simulator.addEvent("Event2", 50.0); 
//	            fail("Expected IllegalArgumentException, but it was not thrown.");
//	        } catch (IllegalArgumentException e) {
//	            assertNotNull(e.getMessage()); 
//	        }
//	    }

	    @Test
	    public void testSimulateEvents() {
	        // Add test cases to verify the simulation results.
	        
	        // Test when there are two events with equal probabilities.
	        simulator.addEvent("Event1", 50.0);
	        simulator.addEvent("Event2", 50.0);
	        int numSimulations = 1000;
	        int tolerance = 50; // Allow some tolerance due to randomness
	        
	        // Simulate events and check if they are roughly equal in count.
	        for (int i = 0; i < 10; i++) {
	            simulator.simulateEvents(numSimulations);
	            int countEvent1 = simulator.simulateEvents(numSimulations).get("Event1");
	            int countEvent2 = simulator.simulateEvents(numSimulations).get("Event2");
	            assertTrue(Math.abs(countEvent1 - countEvent2) < tolerance);
	        }
	        
	        // Add more test cases for different scenarios.
	    }
	    
	    
	    @Test
	    public void testSimulateEvents_For_Dice() {
	        simulator.addEvent("Even1", 10.0);
	        simulator.addEvent("Even2", 30.0);
	        simulator.addEvent("Event3", 15.0);
	        simulator.addEvent("Event4", 15.0);
	        simulator.addEvent("Event5", 30.0);
	        simulator.addEvent("Event6", 0.0);

	        int numSimulations = 1000;
	        int tolerance = 50;

	        for (int i = 0; i < 10; i++) {
	            Map<String, Integer> simulationResult = simulator.simulateEvents(numSimulations);
	            int countEvent1 = simulationResult.get("Even1");
	            int countEvent2 = simulationResult.get("Even2");
	            int countEvent3 = simulationResult.get("Event3");
	            int countEvent4 = simulationResult.get("Event4");
	            int countEvent5 = simulationResult.get("Event5");
	            int countEvent6 = simulationResult.get("Event6");
	            
	            // Now you can perform your assertions on the counts.
	            assertTrue(Math.abs(countEvent1 - countEvent2 - countEvent3 - countEvent4 - countEvent5 - countEvent6) < tolerance);
	        }
	    }
	
}
